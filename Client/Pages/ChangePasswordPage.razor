@page "/changePassword"

@attribute [Authorize]
@inject IAuthClient IAuthClient
@inject PasswordChecker passCheck
@inject TokenHolder TokenHolder

<h3>ChangePasswordPage</h3>

<EditForm Model="passForm" OnValidSubmit="changePass">
	<p>Old Password:</p>
	<InputText type="password" @bind-Value="passForm.oldPassword" id="oldpass"></InputText>
	<br/>
	<p>New Password:</p>
	<InputText type="password" @bind-Value="passForm.newPassword" @oninput="passStrength" id="newpass"></InputText>
	<p>Confirm Password:</p>
	<InputText type="password" @bind-Value="passForm.confirmPassword" id="confpass"></InputText>
	<br/>
	<p><b>Password strength</b></p>
	<p>@passStrMsg</p>
	<button disabled=@(!passStrong) class="btn btn-primary" type="submit">Change password</button>
</EditForm>

@if (!string.IsNullOrEmpty(message))
{
	<h3>@message</h3>
}

<img hidden="@(!isLoading)" src="spinner.gif" />

@code {
	bool isLoading = false;
	string message = string.Empty;
	PasswordChangeForm passForm=new PasswordChangeForm();

	string passStrMsg=string.Empty;
	bool passStrong = false;

	protected override async Task OnInitializedAsync()
	{
		passForm.confirmPassword = string.Empty;
		passForm.oldPassword = string.Empty;
		passForm.newPassword = string.Empty;
	}

	private async Task changePass()
	{
		isLoading = true;

		ValidationContext context = new ValidationContext(passForm);
		List<ValidationResult> validationResults = new List<ValidationResult>();
		bool valid = Validator.TryValidateObject(passForm, context, validationResults, true);
		if (!valid)
		{
			isLoading = false;
			message = passForm.newPassword==passForm.confirmPassword?"Data is invalid":"Confirm password is different from new password";
			return;
		}
		var res = await IAuthClient.ChangePassword(passForm);
		if (res.Success)
		{
			TokenHolder.DelayClear();
			message = "Your password was changed, you will be log out in 5 seconds.";
		}
		else
			{
			message = res.Message;
		}
		isLoading = false;
	}

	private void passStrength()
	{
		Console.WriteLine("Check");
		var res=passCheck.FullPasswordCheck(passForm.newPassword);
		if (!res.Success)
		{
			message = res.Message;
			passStrong = false;
		}
		else
		{
			message = string.Empty;
			passStrMsg = res.Data;
			passStrong = true;
		}
		StateHasChanged();
	}
}
